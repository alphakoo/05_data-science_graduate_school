# -*- coding: utf-8 -*-
"""데이터과학 프로그래밍 10주차 과제(구대현).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hpPbu1wb088I2w1CbHLYlz28VEoaeE3I

#1.Find the total cost and average price for th parts supplied by 'Supplier X', 'Supplier Y' and 'Supplier Z' in the file supplier_data.csv
"""

from google.colab import drive
drive.mount('/content/drive')

import csv

# 2nd count, 3rd cost
supplier_data = [['Supplier X', 0, 0],
                 ['Supplier Y',0,0],
                 ['Supplier Z', 0, 0]]

# reading file path
r_file_path = '/content/drive/MyDrive/[00]데이터사이언스 대학원/22년 1학기 데이터과학 프로그래밍/[01]data/supplier_data.csv'

# read file
with open(r_file_path, 'r', newline='') as csv_r_file:

  # read from csv object
  file_reader = csv.reader(csv_r_file, delimiter=',')

  # extracting header
  header = next(file_reader)

  # check header
  print(f'header >> {header}')

  # 
  for row in file_reader:

    # first column
    supplier = row[0].strip()

    # transfer cost from str to float
    cost = float(row[3].strip('$').replace(',', ''))

    # Supplier X
    if supplier == 'Supplier X':
      
      # count
      supplier_data[0][1] += 1
      # cost
      supplier_data[0][2] += cost

    # Supplier Y
    if supplier == 'Supplier Y':

      supplier_data[1][1] += 1

      supplier_data[1][2] += cost        


    # Supplier Z
    if supplier == 'Supplier Z':

      supplier_data[2][1] += 1

      supplier_data[2][2] += cost                

# check whole data
print(supplier_data)        

print()

print(f'Supplier X >> total_cost:{supplier_data[0][2]}, average_price:{supplier_data[0][2]/supplier_data[0][1]}')

print(f'Supplier Y >> total_cost:{supplier_data[1][2]}, average_price:{supplier_data[1][2]/supplier_data[1][1]}')

print(f'Supplier X >> total_cost:{supplier_data[2][2]}, average_price:{supplier_data[2][2]/supplier_data[2][1]}')

"""#2.Find the Move Title with the highest score and the Movie Title with the lowest score from the deniro.csv file."""

import csv

score_dic = {}

file_path = '/content/drive/MyDrive/[00]데이터사이언스 대학원/22년 1학기 데이터과학 프로그래밍/[01]data/deniro.csv'

with open(file_path, 'r', newline='') as movie_file:

  file_reader = csv.reader(movie_file, delimiter=',')
  
  header = next(file_reader)

  # print(header)
  

  for row in file_reader:

    if not row:           # 가장 뒤에 빈 리스트가 있음을 체크
      pass
    else:
      score = int(row[1].strip())
      title = row[2].strip()

      score_dic[title] = score
    
  sorted_score_dic = dict(sorted(score_dic.items(), key=lambda item:item[1]))

  # print(f'sorted_score_dic >> {sorted_score_dic}')   

  print(f'Highest Score of Deniro Movie >> {max(sorted_score_dic, key=sorted_score_dic.get)}')

  print(f'Lowest Score of Deniro Movie >> {min(sorted_score_dic, key=sorted_score_dic.get)}')

"""#3.When was the best year for 'Robert De Niro'? That is, int the Deniro.csv file, find the year with the highest average score of the movie title."""

import csv

# 연도별 점수 평균을 딕셔너리에 기록 함수
def setScoreData(tmp_score, past_year, score_data):

  avr = sum(tmp_score) / len(tmp_score)

  score_data[past_year] = avr

  # print(score_data)



# 연도별로
def getResultByYear(file_reader, score_data):

  past_year = None

  tmp_score = list()

  for row in file_reader:
    
    for ~~~~~:

      if
         break
    if row:

      # 연도가 바뀌면
      if row[0] != past_year and past_year != None:
        # print('here')

        # 연도와 점수(리스트에서 평균) 기록
        setScoreData(tmp_score, past_year, score_data)

        # 점수 초기화
        tmp_score.clear()

        # 새 점수 기록
        tmp_score.append(int(row[1]))

      # 연도가 그대로면
      else:
        # print('there')
        # 점수 기록
        tmp_score.append(int(row[1]))

      # 연도 메모
      past_year = row[0].strip()      

      
      # print(f'tmp_score >> {tmp_score}')
      # print('============================')


score_data={}

file_path = '/content/drive/MyDrive/[00]데이터사이언스 대학원/22년 1학기 데이터과학 프로그래밍/[01]data/deniro.csv'

with open(file_path, 'r', newline='') as movie_file:

  file_reader = csv.reader(movie_file, delimiter=',')

  header = next(file_reader)

  
  # 함수에서 모든 처리
  getResultByYear(file_reader, score_data)

  
  # print(score_data)

  # 평점 기준으로 오름차순 정렬
  sorted_score = dict(sorted(score_data.items(), key=lambda item:item[1]))

  # print(sorted_score)

  # 최대 score를 가진 key값 리턴
  highest_score_year = max(sorted_score, key=sorted_score.get)

  print(f'Highest Average Score year >> {highest_score_year}')

